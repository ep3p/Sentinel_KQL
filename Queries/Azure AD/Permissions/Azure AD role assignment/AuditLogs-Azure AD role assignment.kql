let _PIM_ids = toscalar(
    _GetWatchlist('Activity-ExpectedSignificantActivity')
    | where Activity == "PrivilegedIdentityManagement" and Notes has "[App]"
    | summarize make_list(ActorId)
);
let _PrivAzureADRoles = toscalar(
    _GetWatchlist('RegEx-PrivAADRoles')
    | summarize RegEx = make_list(RegEx)
    | extend RegEx = strcat(@'^(', strcat_array(RegEx, '|'), @')$')
);
let _RoleManagementCoreDirectory = materialize(
    AuditLogs
    | where Category == "RoleManagement" and LoggedByService == "Core Directory" and AADOperationType in ("Assign", "Unassign")
    | mv-apply ModifiedProperties = TargetResources[0].modifiedProperties on (
        summarize BagToUnpack = make_bag(pack(tostring(ModifiedProperties.displayName), replace_string(tostring(iff(OperationName has "remove", ModifiedProperties.oldValue, ModifiedProperties.newValue)),'"', "")))
    )
    | evaluate bag_unpack(BagToUnpack, columnsConflict='replace_source')
    | project
        TimeGenerated,
        LoggedByService,
        Category,
        AADOperationType,
        OperationName,
        EligibleOperation = OperationName contains "eligible",
        RemoveOperation = OperationName has "remove",
        Result,
        // Information about the Privileged Role
        RoleDisplayName = iff(not(OperationName has_any ("role definition", "roledefinition")), column_ifexists('Role.DisplayName', ''), column_ifexists('RoleDefinition.DisplayName', '')),
        RoleObjectName = column_ifexists('Role.WellKnownObjectName', ''),
        RoleTemplateId = iff(not(OperationName has_any ("role definition", "roledefinition")), column_ifexists('Role.TemplateId', ''), column_ifexists('RoleDefinition.ObjectID', '')),
        // Information about the actor
        ActorIdentity = Identity,
        // Information about the actor, if it was a user
        ActorUserPrincipalName = tolower(InitiatedBy.user.userPrincipalName),
        ActorUserIPAddress = tostring(InitiatedBy.user.ipAddress),
        ActorUserRoles = tostring(InitiatedBy.user.roles),
        ActorUserId = tostring(InitiatedBy.user.id),
        // Information about the actor, if it was an application
        ActorAppName = tostring(InitiatedBy.app.displayName),
        ActorAppId = tostring(InitiatedBy.app.appId),
        ActorAppServicePrincipalName = tostring(InitiatedBy.app.servicePrincipalName),
        ActorAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId),
        // Information about the target object
        TargetType = tostring(TargetResources[0].type),
        TargetDisplayName = tostring(TargetResources[0].displayName), //In case of service principal added to role
        TargetUserPrincipalName = tolower(TargetResources[0].userPrincipalName), //In case of user added to role
        TargetId = tostring(TargetResources[0].id),
        // JSONs containers
        InitiatedBy,
        TargetResources,
        AdditionalDetails,
        CorrelationId = todynamic(CorrelationId)
    | extend
        PermanentOperation = iff(not(ActorIdentity == "MS-PIM" and bag_has_key(InitiatedBy, "app")), true, bool(null)) //not(ActorUserId in (_PIM_ids) or ActorAppServicePrincipalId in (_PIM_ids))
);
let _RoleManagementPIM =
    AuditLogs
    | where Category == "RoleManagement" and LoggedByService == "PIM" and OperationName has_any ("to role", "from role", "role assignment")
    | mv-apply ModifiedProperties = TargetResources[0].modifiedProperties on (
        summarize BagToUnpack = make_bag(pack(tostring(ModifiedProperties.displayName), replace_string(tostring(iff(OperationName has "remove", ModifiedProperties.oldValue, ModifiedProperties.newValue)),'"', "")))
    )
    | evaluate bag_unpack(BagToUnpack, columnsConflict='replace_source')
    | mv-apply Details = AdditionalDetails on (
        summarize take_any(*), ActorUserIPAddress = tostring(take_anyif(Details.value, Details.key == "ipaddr"))
        | project-away Details
    )
    | project
        TimeGenerated,
        LoggedByService,
        Category,
        AADOperationType,
        OperationName,
        EligibleOperation = OperationName has "eligible",
        RemoveOperation = OperationName has "remove",
        PermanentOperation = OperationName has "permanent",
        Result,
        ResultReason,
        // Information about the Privileged Role
        RoleDisplayName = tostring(TargetResources[0].displayName),
        RoleTemplateId = tostring(TargetResources[0].id),
        // Information about the actor
        ActorIdentity = Identity,
        // Information about the actor, if it was a user
        ActorUserPrincipalName = tolower(InitiatedBy.user.userPrincipalName),
        ActorUserIPAddress,
        ActorUserRoles = tostring(InitiatedBy.user.roles),
        ActorUserId = tostring(InitiatedBy.user.id),
        // Information about the actor, if it was an application
        ActorAppName = tostring(InitiatedBy.app.displayName),
        ActorAppId = tostring(InitiatedBy.app.appId),
        ActorAppServicePrincipalName = tostring(InitiatedBy.app.servicePrincipalName),
        ActorAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId),
        // Information about the target object
        TargetType = tostring(TargetResources[iff(AADOperationType == "RemoveActivatedRole", 3, 2)].type),
        TargetDisplayName = tostring(TargetResources[iff(AADOperationType == "RemoveActivatedRole", 3, 2)].displayName),
        TargetId = tostring(TargetResources[iff(AADOperationType == "RemoveActivatedRole", 3, 2)].id),
        // JSONs containers
        InitiatedBy,
        TargetResources,
        AdditionalDetails,
        CorrelationId
    | summarize
        RequestedTimeGenerated = make_list_if(TimeGenerated, OperationName has "requested"),
        CompletedTimeGenerated = make_list_if(TimeGenerated, not(OperationName has "requested")),
        RequestsCount = countif(OperationName has "requested"),
        CompletedRequestsCount = countif(OperationName has "completed"),
        arg_max(TimeGenerated, *)
        by CorrelationId, EligibleOperation, RemoveOperation, PermanentOperation, TargetId, TargetType, RoleTemplateId
    | extend CompletedRequestsCount = iff(RequestsCount == 1, CompletedRequestsCount, 0)
    | lookup kind=leftouter (
        _RoleManagementCoreDirectory
        | where ActorIdentity == "MS-PIM" and bag_has_key(InitiatedBy, "app") //(ActorUserId in (_PIM_ids) or ActorAppServicePrincipalId in (_PIM_ids))
        | extend LoggedByService = "PIM"
        | project-rename CoreDirectory_TargetResources = TargetResources
        | summarize
            arg_max(TimeGenerated, CoreDirectory_TargetResources, TargetUserPrincipalName, RoleObjectName)
            by LoggedByService, EligibleOperation, RemoveOperation, TargetId, TargetType, RoleTemplateId
        | project-away TimeGenerated
    ) on LoggedByService, EligibleOperation, RemoveOperation, TargetId, TargetType, RoleTemplateId
;
union
    (_RoleManagementCoreDirectory
    | where not(ActorIdentity == "MS-PIM" and bag_has_key(InitiatedBy, "app")) //not(ActorUserId in (_PIM_ids) or ActorAppServicePrincipalId in (_PIM_ids))
    | project-rename CoreDirectory_TargetResources = TargetResources
    ),
    (_RoleManagementPIM
    | summarize
        RequestedTimeGenerated = make_list(RequestedTimeGenerated),
        CompletedTimeGenerated = make_list(CompletedTimeGenerated),
        RequestsCount = sum(RequestsCount),
        CompletedRequestsCount = sum(CompletedRequestsCount),
        CorrelationId = make_list(CorrelationId),
        arg_max(TimeGenerated, *)
        by EligibleOperation, RemoveOperation, PermanentOperation, AADOperationType, ActorIdentity, TargetId, TargetType, RoleTemplateId
    | extend
        RequestedTimeGenerated = iff(array_length(RequestedTimeGenerated) == 1, RequestedTimeGenerated[0], RequestedTimeGenerated),
        CompletedTimeGenerated = iff(array_length(CompletedTimeGenerated) == 1, CompletedTimeGenerated[0], CompletedTimeGenerated)
    | project-rename PIM_TargetResources = TargetResources
    )
| extend
    PrivilegedRole = RoleDisplayName matches regex _PrivAzureADRoles,
    WorkingTime = IsWorkingTime(TimeGenerated),
    AlertName = strcat_delim(" ",
        iff(RemoveOperation, "Remove", "Add"),
        iff(PermanentOperation, "permanent", "temporary"),
        iff(EligibleOperation, "eligible", "active"),
        "member",
        iff(RemoveOperation, "from role", "to role"))
| extend
    AlertSeverity = case(
        // Automatic Remove operations by Azure AD PIM
        not(PermanentOperation) and RemoveOperation and (ActorUserId in (_PIM_ids) or ActorAppServicePrincipalId in (_PIM_ids)), "Informational",
        OperationName has "role assignment" and RemoveOperation and (ActorUserId in (_PIM_ids) or ActorAppServicePrincipalId in (_PIM_ids)), "Informational",
        // Activate an eligible role
        WorkingTime and AADOperationType == "ActivateRole", "Informational",
        not(WorkingTime) and AADOperationType == "ActivateRole", "Medium",
        // Other
        not(WorkingTime) and PermanentOperation, "High",
        not(WorkingTime) and not(PermanentOperation) and not(RemoveOperation), "High",
        WorkingTime and PermanentOperation and PrivilegedRole, "Medium",
        WorkingTime and PermanentOperation and not(PrivilegedRole), "Medium",
        WorkingTime and not(PermanentOperation) and PrivilegedRole, "Informational",
        WorkingTime and not(PermanentOperation) and not(PrivilegedRole), "Informational",
        "High"
    )
| project
    TimeGenerated,
    LoggedByService,
    Category,
    AADOperationType,
    OperationName,
    EligibleOperation,
    PermanentOperation,
    RemoveOperation,
    RequestsCount,
    CompletedRequestsCount,
    RequestedTimeGenerated,
    CompletedTimeGenerated,
    Result,
    ResultReason,
    RoleDisplayName,
    RoleObjectName,
    RoleTemplateId,
    PrivilegedRole,
    ActorIdentity,
    ActorUserPrincipalName,
    ActorUserIPAddress,
    ActorUserRoles,
    ActorUserId,
    ActorAppName,
    ActorAppId,
    ActorAppServicePrincipalName,
    ActorAppServicePrincipalId,
    TargetType,
    TargetDisplayName,
    TargetUserPrincipalName,
    TargetId,
    InitiatedBy,
    AdditionalDetails,
    PIM_TargetResources,
    CoreDirectory_TargetResources,
    CorrelationId,
    AlertName,
    AlertSeverity
