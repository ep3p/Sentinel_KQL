let query_frequency = 1h;
let query_period = 14d;
let query_wait = 30m;
let consecutive_failures_threshold = 1;
let account_threshold = 10;
let _SuccessResultTypes = toscalar(
    _GetWatchlist("ResultType-SignInLogsErrorCodes")
    | where Notes has_any ("[Expired]", "[Success]") and isnotempty(ResultDescription)
    | summarize make_list(ResultType)
);
let _SuspiciousAddresses = toscalar(
    ADFSSignInLogs
    | where TimeGenerated between (ago(query_period + query_wait) .. ago(query_wait))
    | where ResultType in (50057, 50126, 50144, 50155, 300030) and isnotempty(parse_ipv4(IPAddress)) and ipv4_is_private(IPAddress)
    | sort by UserPrincipalName, UserId, ResultType
    | where not(ResultType == 300030 and prev(ResultType) == ResultType and prev(UserId) == UserId and prev(UserPrincipalName) == UserPrincipalName)
    | make-series Count = count() default=0 on TimeGenerated from ago(query_period + query_wait) to ago(query_wait) step 2*query_frequency by IPAddress
    | extend series_decompose_anomalies(Count, 4, toint(1d/query_frequency), 'none', consecutive_failures_threshold)
    | where array_sum(array_slice(series_decompose_anomalies_Count_ad_flag, -(consecutive_failures_threshold), -1)) == (1 * consecutive_failures_threshold)
    | summarize make_list(IPAddress)
);
ADFSSignInLogs
| where TimeGenerated between (ago((consecutive_failures_threshold * query_frequency) + query_wait) .. ago(query_wait))
| where ResultType in (50057, 50126, 50144, 50155, 300030) and IPAddress in (_SuspiciousAddresses)
| summarize
    StartTime = min(TimeGenerated),
    EndTime = max(TimeGenerated),
    FailureAccountCount = dcount(UserPrincipalName),
    FailureAccountSample = array_sort_asc(make_set(UserPrincipalName, 250)),
    take_any(TokenIssuerName)
    by IPAddress, UserAgent
| top 100 by FailureAccountCount desc
| summarize
    StartTime = min(StartTime),
    EndTime = max(EndTime),
    FailureAccountCount = sum(FailureAccountCount),
    FailureAccountSample = array_sort_asc(make_set(FailureAccountSample, 250)),
    UserAgentCount = make_list(bag_pack(iff(isnotempty(UserAgent), UserAgent, "<<<empty UserAgent>>>"), FailureAccountCount)),
    take_any(TokenIssuerName)
    by IPAddress
| where FailureAccountCount > account_threshold
| project
    StartTime,
    EndTime,
    IPAddress,
    FailureAccountCount,
    FailureAccountSample,
    UserAgentCount,
    TokenIssuerName
