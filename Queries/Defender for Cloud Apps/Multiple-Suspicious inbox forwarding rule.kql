let query_frequency = 5m;
let query_period = 2d;
let query_wait = 30m;
SecurityAlert
| where TimeGenerated > ago(query_period)
| where ProductName has "Microsoft Cloud App Security" and ProviderName != "ASI Scheduled Alerts" and AlertName has "Suspicious inbox forwarding rule"
| summarize arg_min(TimeGenerated, *) by VendorOriginalId
| where TimeGenerated between (ago(query_frequency + query_wait) .. ago(query_wait))
| extend ExtendedProperties = todynamic(ExtendedProperties)
| project
    Alert_TimeGenerated = TimeGenerated,
    ProductName,
    AlertName,
    Description,
    AlertSeverity,
    Alert_Status = Status,
    Tactics,
    Techniques,
    SubTechniques,
    Entities,
    ExtendedProperties,
    AlertLink,
    VendorOriginalId,
    SystemAlertId
| lookup kind=leftouter (
    AADUserRiskEvents
    | where TimeGenerated > ago(query_period)
    | where OperationName == "User Risk Detection" and Source == "MicrosoftCloudAppSecurity" and RiskEventType == "suspiciousInboxForwarding"
    | summarize arg_max(TimeGenerated, *) by Id
    | mv-apply Auxiliar_AdditionalInfo = AdditionalInfo on (
        where Auxiliar_AdditionalInfo["Key"] == "alertUrl"
        | extend VendorOriginalId = tostring(split(tostring(Auxiliar_AdditionalInfo["Value"]), "/")[-1])
        )
    | project
        //TimeGenerated,
        UserDisplayName,
        UserPrincipalName,
        UserId,
        OriginalRequestId = RequestId,
        CorrelationId,
        RiskDetail,
        RiskLevel,
        RiskState,
        DetectionTimingType,
        AdditionalInfo,
        VendorOriginalId
    ) on VendorOriginalId
| as _Alerts
| lookup kind=leftouter (
    union SigninLogs, AADNonInteractiveUserSignInLogs
    | where TimeGenerated > ago(query_period)
    | where OriginalRequestId in (toscalar(_Alerts | summarize make_list(OriginalRequestId))) and not(RiskState == "none")
    | extend TimeReceived = _TimeReceived
    | invoke UnifySignInLogs()
    | summarize
        arg_max(TimeReceived, *),
        MFASuccess_CreatedDateTime = minif(CreatedDateTime, ConditionalAccessStatus == "success" and AuthenticationRequirement == "multiFactorAuthentication")
        by OriginalRequestId
    | project
        TimeGenerated,
        CreatedDateTime,
        Type,
        //UserDisplayName,
        //UserPrincipalName,
        //UserId,
        AlternateSignInName,
        SignInIdentifier,
        UserType,
        IPAddress,
        AutonomousSystemNumber,
        Location,
        NetworkLocationDetails,
        ResultType,
        ResultDescription,
        ClientAppUsed,
        AppDisplayName,
        ResourceDisplayName,
        DeviceDetail,
        UserAgent,
        Status,
        MfaDetail,
        AuthenticationContextClassReferences,
        AuthenticationDetails,
        AuthenticationProcessingDetails,
        AuthenticationProtocol,
        AuthenticationRequirement,
        AuthenticationRequirementPolicies,
        SessionLifetimePolicies,
        TokenIssuerType,
        IncomingTokenType,
        TokenProtectionStatusDetails,
        ConditionalAccessStatus,
        ConditionalAccessPolicies,
        //RiskDetail,
        RiskEventTypes,
        RiskLevelAggregated,
        RiskLevelDuringSignIn,
        //RiskState,
        HomeTenantId,
        ResourceTenantId,
        CrossTenantAccessType,
        AppId,
        ResourceIdentity,
        SessionId,
        OriginalRequestId,
        //CorrelationId,
        MFASuccess_CreatedDateTime
    ) on OriginalRequestId
| where case(
    AlertSeverity == "High", true,
    RiskDetail == "aiConfirmedSigninSafe" and RiskState == "dismissed", false,
    true
    )
