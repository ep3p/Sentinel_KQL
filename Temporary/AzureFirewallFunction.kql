// This query can help you to parse Azure Firewall events received in AzureDiagnostics table.
// Currently this table is the legacy logging for Azure Firewall and there are other tables that can receive this information.
// IPv6 ranges are not supported
//
// Click "Save as function", in Parameters write in the fields:
//
//
// If you name the function "AzureFirewallLogs", you can check the function with queries like the following:
//
// AzureFirewallLogs()
//
// AzureFirewallLogs(
//
//let Function = (
//     source:string = "",
//     destination:string = "",
//     source_port:int = int(null),
//     destination_port:int = int(null),
//     action:string = "",
//     protocol:string = "",
//     network_log:bool = true,
//     application_log:bool = true,
//     nat_log:bool = true,
//     ids_log:bool = true,
//     threatintel_log:bool = true,
//     policy:string = "",
//     rule_collection_group:string = "",
//     rule_collection:string = "",
//     rule:string = ""
// ){
let input_checks =
    (isempty(source) or isnotempty(parse_ipv4(source)) or isnotempty(parse_ipv6(source)))
    and (isempty(destination) or isnotempty(parse_ipv4(destination)) or isnotempty(parse_ipv6(destination)))
;
let search_terms_limit = 2;
// Prepare source address search terms
let source_netmask_step = ipv4_netmask_suffix(source);
let source_netmask = iff(source_netmask_step % 8 <= search_terms_limit, bin(source_netmask_step, 8), source_netmask_step);
let source_constant_prefix = iff(bin(source_netmask-1, 8)/8 == 0, "", strcat_array(array_slice(split(format_ipv4(source, source_netmask), "."), 0, -1 + bin(source_netmask-1, 8)/8), "."));
let source_lower_variable_prefix = toint(split(format_ipv4(source, source_netmask), ".")[-(1 + bin(32-source_netmask, 8)/8)]);
let source_search_terms = split(replace_string(strcat(strcat(iff(source_netmask > 8 ,"<<>>", ""), strcat_array(range(source_lower_variable_prefix, toint(source_lower_variable_prefix + pow(2,(-source_netmask)% 8)-1)), strcat(iff(source_netmask <= 24, ".", ""), "|", iff(source_netmask > 8 ,"<<>>", "")))), iff(source_netmask between ((search_terms_limit + 1) .. 24), ".", "")), "<<>>", strcat(source_constant_prefix, ".")), "|");
// Prepare destination address search terms
let destination_netmask_step = ipv4_netmask_suffix(destination);
let destination_netmask = iff(destination_netmask_step % 8 <= search_terms_limit, bin(destination_netmask_step, 8), destination_netmask_step);
let destination_constant_prefix = iff(bin(destination_netmask-1, 8)/8 == 0, "", strcat_array(array_slice(split(format_ipv4(destination, destination_netmask), "."), 0, -1 + bin(destination_netmask-1, 8)/8), "."));
let destination_lower_variable_prefix = toint(split(format_ipv4(destination, destination_netmask), ".")[-(1 + bin(32-destination_netmask, 8)/8)]);
let destination_search_terms = split(replace_string(strcat(strcat(iff(destination_netmask > 8 ,"<<>>", ""), strcat_array(range(destination_lower_variable_prefix, toint(destination_lower_variable_prefix + pow(2,(-destination_netmask)% 8)-1)), strcat(iff(destination_netmask <= 24, ".", ""), "|", iff(destination_netmask > 8 ,"<<>>", "")))), iff(destination_netmask between ((search_terms_limit + 1) .. 24), ".", "")), "<<>>", strcat(destination_constant_prefix, ".")), "|");
// Prepare operation types booleans
let removed_logs = set_difference(
    array_iff(
        pack_array(network_log, application_log, nat_log, ids_log, threatintel_log),
        "",
        dynamic(["AzureFirewallNetworkRuleLog", "AzureFirewallApplicationRuleLog", "AzureFirewallNatRuleLog", "AzureFirewallIDSLog", "AzureFirewallThreatIntelLog"])
    ),
    dynamic([""])
);
let all_logs = array_length(removed_logs) == 0;
// Query
AzureDiagnostics
| where ResourceProvider has "MICROSOFT.NETWORK" and ResourceType has "AZUREFIREWALLS" and Category has_any ("AzureFirewallNetworkRule","AzureFirewallApplicationRule")
| project TimeGenerated, Category, OperationName, msg_s, ResourceId
// Check input
| where input_checks
// Filter by OperationName
| where all_logs or not(OperationName has_any (removed_logs))
// Filter by Action
| where isempty(action) or msg_s has action
// Filter by protocol
| where isempty(protocol) or msg_s has protocol
// Filter by Policy
| where isempty(policy) or msg_s has policy
// Filter by RuleCollectionGroup
| where isempty(rule_collection_group) or msg_s has rule_collection_group
// Filter by RuleCollection
| where isempty(rule_collection) or msg_s has rule_collection
// Filter by Rule
| where isempty(rule) or msg_s has rule
// Filter by addresses
| where isempty(source) or (source_netmask < 16) or has_any_ipv4_prefix(source, source_search_terms)
| where isempty(destination) or (destination_netmask < 16) or has_any_ipv4_prefix(destination, destination_search_terms)
// Parse msg_s
| parse msg_s with Protocol " request from " SourceAddress1 ":" SourcePort:int " to " DestinationAddress1 ":" DestinationPort:int *
| parse msg_s with * ". Action: " Action1a "." *
| parse msg_s with * " was " Action1b " to " NatDestinationAddress ":" NatDestinationPort:int "." *
| parse msg_s with Protocol2 " request from " SourceAddress2 " to " DestinationAddress2 ". Action: " Action2 "." *
| parse msg_s with * ". Policy: " Policy ". Rule Collection Group: " RuleCollectionGroup ". Rule Collection: " RuleCollection ". Rule: " Rule
| extend
    FirewallAction = case(isnotempty(Action1a), Action1a, isnotempty(Action1b), Action1b, Action2),
    Protocol = iff(isnotempty(Protocol), Protocol, Protocol2),
    SourceAddress = iff(isnotempty(SourceAddress1), SourceAddress1, SourceAddress2),
    DestinationAddress = iff(isnotempty(DestinationAddress1), DestinationAddress1, DestinationAddress2)
| project TimeGenerated, Category, OperationName, FirewallAction, Protocol, SourceAddress, DestinationAddress, NatDestinationAddress, SourcePort, DestinationPort, NatDestinationPort, Rule, RuleCollection, RuleCollectionGroup, Policy, msg_s, ResourceId
// Filter by Action
| where isempty(action) or FirewallAction has action
// Filter by protocol
| where isempty(protocol) or Protocol has protocol
// Filter by Policy
| where isempty(policy) or Policy == policy
// Filter by RuleCollectionGroup
| where isempty(rule_collection_group) or RuleCollectionGroup == rule_collection_group
// Filter by RuleCollection
| where isempty(rule_collection) or RuleCollection == rule_collection
// Filter by Rule
| where isempty(rule) or Rule == rule
// Filter by addresses
| where isempty(source) or (isnotempty(parse_ipv4(SourceAddress)) and ipv4_is_in_range(SourceAddress, source))
| where isempty(destination) or (isnotempty(parse_ipv4(DestinationAddress)) and ipv4_is_in_range(DestinationAddress, destination)) or (isnotempty(parse_ipv4(NatDestinationAddress)) and ipv4_is_in_range(NatDestinationAddress, destination))
// Filter by ports, unfortunately ports can have less than 3 characters
| where isempty(source_port) or SourcePort == source_port
| where isempty(destination_port) or SourcePort == destination_port or NatDestinationPort == destination_port
//};
//Function(source, destination)
// TO DO IPv6
