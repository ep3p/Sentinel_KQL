{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "AWSIdentityRole",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "This function creates two columns with the assumed identity and role of the actor of a AWSCloudTrail event",
            "category": "Analytics",
            "FunctionAlias": "AWSIdentityRole",
            "query": "let _AWSAccounts = _GetWatchlist(\"AccountId-AuditAWSAccounts\");\nT\n| lookup (_AWSAccounts | project RecipientAccountId = AccountId, RecipientAccountName = AccountName) on RecipientAccountId\n| lookup (_AWSAccounts | project UserIdentityAccountId = AccountId, UserIdentityAccountName = AccountName) on UserIdentityAccountId\n| extend\n    Identity = case(\n        UserIdentityType == \"AWSAccount\", strcat(coalesce(UserIdentityAccountName, UserIdentityAccountId), extract(@\"(\\:[^\\:]+$)\", 1, UserIdentityPrincipalid)),\n        UserIdentityType == \"Root\", strcat(coalesce(UserIdentityAccountName, UserIdentityAccountId), extract(@\"(\\:[^\\:]+$)\", 1, UserIdentityArn)),\n        UserIdentityType == \"IAMUser\", strcat(coalesce(UserIdentityAccountName, UserIdentityAccountId), extract(@\"(\\:[^\\:]+$)\", 1, UserIdentityArn)),\n        UserIdentityType == \"AssumedRole\" and SessionIssuerType in (\"\", \"Role\"), extract(@\"\\:([^\\:]+$)\", 1, UserIdentityPrincipalid),\n        UserIdentityType == \"AWSService\" and EventName == \"AssumeRole\", tostring(todynamic(RequestParameters)[\"roleSessionName\"]),\n        UserIdentityType == \"AWSService\" and not(EventName == \"AssumeRole\"), UserIdentityInvokedBy,\n        UserIdentityType == \"SAMLUser\" and EventName == \"AssumeRoleWithSAML\", UserIdentityUserName,\n        UserIdentityType == \"WebIdentityUser\" and EventName == \"AssumeRoleWithWebIdentity\", UserIdentityUserName,\n        UserIdentityType == \"Unknown\" and EventName == \"UserAuthentication\" and UserIdentityPrincipalid == UserIdentityAccountId, coalesce(UserIdentityAccountName, UserIdentityPrincipalid),\n        UserIdentityType == \"Unknown\" and not(EventName == \"UserAuthentication\"), coalesce(UserIdentityUserName, UserIdentityPrincipalid, UserIdentityAccessKeyId),\n        UserIdentityType == \"\", coalesce(UserIdentityInvokedBy, tostring(split(todynamic(RequestParameters)[\"sessionId\"], \"-\")[0])),\n        extract(@\"\\:([^\\:]+$)\", 1, UserIdentityPrincipalid)\n    ),\n    Role = case(\n        UserIdentityType == \"AssumedRole\", coalesce(SessionIssuerUserName, extract(@\"\\:assumed-role\\/([^\\/]+)\\/\", 1, UserIdentityArn)),\n        EventName matches regex \"^AssumeRole\", tostring(split(todynamic(RequestParameters)[\"roleArn\"], \"/\")[-1]),\n        \"\"\n    )\n",
            "version": 1,
            "functionParameters": "T:(RecipientAccountId:string,UserIdentityAccountId:string,UserIdentityType:string,UserIdentityPrincipalid:string, UserIdentityArn:string,SessionIssuerType:string,EventName:string,RequestParameters:string,UserIdentityInvokedBy:string,UserIdentityUserName:string,UserIdentityAccessKeyId:string,SessionIssuerUserName:string)"
          }
        }
      ]
    }
  ]
}
