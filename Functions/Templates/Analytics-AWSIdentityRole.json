{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "AWSIdentityRole",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "This function creates two columns with the assumed identity and role of the actor of a AWSCloudTrail event",
            "category": "Analytics",
            "FunctionAlias": "AWSIdentityRole",
            "query": "let _AWSAccounts = _GetWatchlist(\"AccountId-AuditAWSAccounts\");\nT\n| extend\n    RecipientAccountId = column_ifexists(\"RecipientAccountId\", \"\"),\n    UserIdentityAccountId = column_ifexists(\"UserIdentityAccountId\", \"\"),\n    UserIdentityType = column_ifexists(\"UserIdentityType\", \"\"),\n    UserIdentityPrincipalid = column_ifexists(\"UserIdentityPrincipalid\", \"\"),\n    UserIdentityArn = column_ifexists(\"UserIdentityArn\", \"\"),\n    SessionIssuerType = column_ifexists(\"SessionIssuerType\", \"\"),\n    EventName = column_ifexists(\"EventName\", \"\"),\n    RequestParameters = column_ifexists(\"RequestParameters\", \"\"),\n    UserIdentityInvokedBy = column_ifexists(\"UserIdentityInvokedBy\", \"\"),\n    UserIdentityUserName = column_ifexists(\"UserIdentityUserName\", \"\"),\n    UserIdentityAccessKeyId = column_ifexists(\"UserIdentityAccessKeyId\", \"\"),\n    SessionIssuerUserName = column_ifexists(\"SessionIssuerUserName\", \"\"),\n    AdditionalEventData = column_ifexists(\"AdditionalEventData\", \"\"),\n    ErrorMessage = column_ifexists(\"ErrorMessage\", \"\")\n| lookup (_AWSAccounts | project RecipientAccountId = AccountId, RecipientAccountName = AccountName) on RecipientAccountId\n| lookup (_AWSAccounts | project UserIdentityAccountId = AccountId, UserIdentityAccountName = AccountName) on UserIdentityAccountId\n| extend\n    Identity = case(\n        UserIdentityType == \"Root\", strcat(coalesce(UserIdentityAccountName, UserIdentityAccountId), \":\", extract(@\"\\:([^\\:]+$)\", 1, UserIdentityArn)),\n        UserIdentityType == \"IAMUser\", strcat(coalesce(UserIdentityAccountName, UserIdentityAccountId), \":\", coalesce(extract(@\"\\:([^\\:]+$)\", 1, UserIdentityArn), strcat(\"user/\", UserIdentityUserName))),\n        UserIdentityType == \"AssumedRole\" and SessionIssuerType in (\"\", \"Role\"), strcat(coalesce(UserIdentityAccountName, UserIdentityAccountId), \":\", \"roleSessionName/\", extract(@\"\\:([^\\:]+$)\", 1, UserIdentityPrincipalid)),\n        UserIdentityType == \"AWSAccount\" and isempty(UserIdentityPrincipalid), strcat(coalesce(UserIdentityAccountName, UserIdentityAccountId), \":\"),\n        UserIdentityType == \"AWSAccount\" and UserIdentityPrincipalid matches regex @\"^[A-Z0-9]{21}$\", strcat(coalesce(UserIdentityAccountName, UserIdentityAccountId), \":\", UserIdentityPrincipalid),\n        UserIdentityType == \"AWSAccount\" and UserIdentityPrincipalid matches regex @\"^[A-Z0-9]{21}\\:[^\\:]+$\", strcat(coalesce(UserIdentityAccountName, UserIdentityAccountId), \":\", \"roleSessionName/\", extract(@\"\\:([^\\:]+$)\", 1, UserIdentityPrincipalid)),\n        UserIdentityType == \"AWSService\", UserIdentityInvokedBy,\n        UserIdentityType == \"SAMLUser\" and EventName == \"AssumeRoleWithSAML\", UserIdentityUserName,\n        UserIdentityType == \"WebIdentityUser\" and EventName == \"AssumeRoleWithWebIdentity\", UserIdentityUserName,\n        UserIdentityType == \"Unknown\" and isnotempty(UserIdentityAccountId) and UserIdentityAccountId == UserIdentityPrincipalid, coalesce(UserIdentityAccountName, UserIdentityAccountId),\n        UserIdentityType == \"Unknown\" and isnotempty(UserIdentityAccountId) and not(UserIdentityAccountId == UserIdentityPrincipalid), coalesce(UserIdentityUserName, UserIdentityPrincipalid, UserIdentityAccessKeyId),\n        UserIdentityType == \"\", coalesce(UserIdentityInvokedBy, extract(@\"(.+)\\-[a-f0-9]{17}$\", 1, tostring(todynamic(RequestParameters)[\"sessionId\"]))),\n        strcat(\"UnexpectedUserIdentityType\", \":\", extract(@\"\\:([^\\:]+$)\", 1, UserIdentityPrincipalid))\n    ),\n    ActorRole = case(\n        UserIdentityType == \"AssumedRole\", coalesce(SessionIssuerUserName, extract(@\"\\:assumed-role\\/([^\\/]+)\\/\", 1, UserIdentityArn)),\n        \"\"\n    )\n| extend\n    TargetRole = case(\n        EventName in (\"SwitchRole\", \"ExitRole\", \"RenewRole\") and UserIdentityType == \"AssumedRole\", ActorRole,\n        EventName in (\"SwitchRole\", \"ExitRole\") and not(UserIdentityType == \"AssumedRole\"), coalesce(extract(@\"\\:assumed-role\\/([^\\/]+)\\/\", 1, tostring(todynamic(AdditionalEventData)[\"SwitchFrom\"])), extract(@\"\\/([^\\/]+)$\", 1, tostring(todynamic(AdditionalEventData)[\"SwitchTo\"]))),\n        EventName matches regex \"^AssumeRole\", coalesce(tostring(split(todynamic(RequestParameters)[\"roleArn\"], \"/\")[-1]), extract(@\"AssumeRole\\w* on resource\\: \\S+\\/([^\\/]+)$\", 1, ErrorMessage)),\n        UserIdentityType == \"Unknown\" and EventName in (\"Federate\", \"GetRoleCredentials\"), tostring(todynamic(ServiceEventDetails)[\"role_name\"]),\n        \"\"\n    ),\n    TargetRoleSessionName = case(\n        EventName matches regex \"^AssumeRole\", tostring(todynamic(RequestParameters)[\"roleSessionName\"]),\n        \"\"\n    )",
            "version": 1,
            "functionParameters": "T:(*)"
          }
        }
      ]
    }
  ]
}
